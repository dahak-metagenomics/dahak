'''
Author: Phillip Brooks, Charles Reid
Affiliation: UC Davis Lab for Data Intensive Biology
Objective: A Snakemake workflow to assemble quality trimmed reads using SPAdes and MEGAHIT  
Date: 2018-06-11
Documentation: docs/workflow_assembly.md
'''
from utils import container_image_is_external, container_image_name
from os.path import join, isfile, dirname
import os, re


############################################
# Assembly: default config

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']


###################################
# Assembly: build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


###################################
# Assembly: metaspades

# Post trimming pattern uses the {direction} wildcard.
# We have to explicitly expand {direction} to _1 and _2.
# (If we rely on wildards, _1 and _2 are two separate rules - bad.)

assembly_metaspades_input_pattern = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'])

assembly_metaspades_input_fwd = assembly_metaspades_input_pattern.format(
            direction=readfilt['direction_labels']['forward'], 
            sample='{sample}', 
            qual='{qual}'
)
assembly_metaspades_input_rev = assembly_metaspades_input_pattern.format(
            direction=readfilt['direction_labels']['reverse'], 
            sample='{sample}', 
            qual='{qual}'
)

assembly_metaspades_outprefix = re.sub('.contigs.fa','',assembly['assembly_patterns']['metaspades_pattern'])
assembly_metaspades_output = join(data_dir, assembly['assembly_patterns']['metaspades_pattern'])

assembly_metaspades_logfile = re.sub('contigs.fa','log',assembly_metaspades_output)
assembly_metaspades_benchfile = re.sub('contigs.fa','benchmark.txt',assembly_metaspades_output)

spades_image = container_image_name(biocontainers, 'metaspades')

rule assembly_metaspades:
    """
    Perform read assembly of trimmed reads using metaspades.
    """
    input:
        fwd = assembly_metaspades_input_fwd,
        rev = assembly_metaspades_input_rev
    output:
        assembly_metaspades_output
    message: 
         '--- Assembling quality trimmed reads with SPAdes'
    singularity: 
        spades_image
    threads: 32 
    log: 
        assembly_metaspades_logfile
    benchmark:
        assembly_metaspades_benchfile
    shell:
        'metaspades.py -t {threads} '
        '-m 240 '
        '-1 /{input.fwd} '
        '-2 /{input.rev} '
        '-o /{data_dir} '
        '&& '
        'mv /{data_dir}/contigs.fasta /{output} '


###################################
# Assembly: megahit

assembly_megahit_input_pattern = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'])

assembly_megahit_input_fwd = assembly_megahit_input_pattern.format(
            direction=readfilt['direction_labels']['forward'], 
            sample='{sample}', 
            qual='{qual}'
)
assembly_megahit_input_rev = assembly_megahit_input_pattern.format(
            direction=readfilt['direction_labels']['reverse'], 
            sample='{sample}', 
            qual='{qual}'
)

# just the name
assembly_megahit_outprefix = re.sub('.contigs.fa','',assembly['assembly_patterns']['megahit_pattern'])
assembly_megahit_output = join(data_dir, assembly['assembly_patterns']['megahit_pattern'])

assembly_megahit_logfile = re.sub('contigs.fa','log',assembly_megahit_output)
assembly_megahit_benchfile = re.sub('contigs.fa','benchmark.txt',assembly_megahit_output)

megahit_image = container_image_name(biocontainers, 'megahit')

def assembly_megahit_outprefix_sub(wildcards):
    return assembly_megahit_outprefix.format(**wildcards)

rule assembly_megahit:
    """
    Perform read assembly of trimmed reads using megahit.
    """
    input:
        fwd = assembly_megahit_input_fwd,
        rev = assembly_megahit_input_rev
    output:
        assembly_megahit_output
    message: 
        '''--- Assembling quality trimmed reads with Megahit'''
    singularity:
        megahit_image
    threads: 8
    log:
        assembly_megahit_logfile
    benchmark:
        assembly_megahit_benchfile
    params:
        assembly_megahit_outprefix_wc = assembly_megahit_outprefix_sub
    shell:
        'rm -rf {data_dir}/{params.assembly_megahit_outprefix_wc} '
        '&& '
        'megahit -t {threads} '
        '--memory 0.80 '
        '-1 /{input.fwd} '
        '-2 /{input.rev} '
        '--out-prefix={params.assembly_megahit_outprefix_wc} '
        '-o /{data_dir}/{params.assembly_megahit_outprefix_wc} '
        '&& '
        'mv '
        '/{data_dir}/{params.assembly_megahit_outprefix_wc}/{params.assembly_megahit_outprefix_wc}.contigs.fa '
        '/{data_dir}/{params.assembly_megahit_outprefix_wc}.contigs.fa '


###################################
# Assembly: quast statistics

assembly_quast_input = join(data_dir, assembly['assembly_patterns']['assembly_pattern'])

assembly_quast_output = join(data_dir, assembly['assembly_patterns']['quast_pattern'])

quast_image = container_image_name(biocontainers, 'quast')

rule assembly_statistics_quast:
    """
    Compute assembly statistics with quast
    """
    input:
        assembly_quast_input
    output:
        assembly_quast_output
    message: 
        '--- Calculating assembly statistics with quast'
    singularity:
        quast_image
    shell:
        'quast.py {input} -o {output}'



###################################
# Assembly: multiqc statistics

assembly_multiqc_input = join(data_dir, assembly['assembly_patterns']['assembly_pattern'])

assembly_multiqc_output = join(data_dir, assembly['assembly_patterns']['multiqc_pattern'])

multiqc_image = container_image_name(biocontainers, 'multiqc')

rule assembly_statistics_multiqc:
    """
    Compute assembly statistics with multiqc
    """
    input:
        assembly_multiqc_input
    output:
        assembly_multiqc_output
    message: 
        '--- Compiling assembly statistics with multiqc'
    singularity:
        multiqc_image
    shell:
        'multiqc {input}'



###################################
# Assembly: build rules

workflows = config['workflows']

directions = [readfilt['direction_labels']['forward'],
              readfilt['direction_labels']['reverse']]


rule assembly_workflow_metaspades:
    """
    Build rule: trigger the metaspades assembly step.
    """
    input:
        expand( assembly_metaspades_output,
                sample    = workflows['assembly_workflow_metaspades']['sample'],
                qual      = workflows['assembly_workflow_metaspades']['qual'],
                direction = directions,
        )

rule assembly_workflow_megahit:
    """
    Build rule: trigger the megahit assembly step.
    """
    input:
        expand( assembly_megahit_output,
                sample    = workflows['assembly_workflow_megahit']['sample'],
                qual      = workflows['assembly_workflow_megahit']['qual'],
                direction = directions,
        )

rule assembly_workflow_all:
    """
    Build rule: trigger the assembly step with all assemblers.
    """
    input:
        expand( assembly_metaspades_output,
                sample    = workflows['assembly_workflow_all']['sample'],
                qual      = workflows['assembly_workflow_all']['qual'],
                direction = directions,
        ),
        expand( assembly_megahit_output,
                sample    = workflows['assembly_workflow_all']['sample'],
                qual      = workflows['assembly_workflow_all']['qual'],
                direction = directions,
        )


